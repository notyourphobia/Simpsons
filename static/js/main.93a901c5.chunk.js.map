{"version":3,"sources":["logo.svg","Quote.js","Quotes.js","Spins.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Quote","image","character","quote","src","alt","Quotes","map","x","Spins","props","handleClick","state","speed","setState","on","bSpins","this","className","style","animation","logo","class","onClick","toLocaleUpperCase","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,kC,mJCkB5BC,G,YAhBD,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,MAApB,OACX,gCACA,yBACAC,IAAKH,EACLI,IAAKH,IAEL,oCACE,oCACGC,GAEH,8BACGD,OCoBOI,EA/BA,WAyBX,OAAQ,4BAxBG,CACP,CACIH,MACE,0FACFD,UAAW,gBACXD,MAAM,gGAEV,CACIE,MAAO,0DACPD,UAAW,eACXD,MAAM,+FAEV,CACIE,MAAO,iEACPD,UAAW,eACXD,MAAM,+FAEV,CACIE,MACE,oJACFD,UAAW,oBACXD,MAAM,mGAGIM,KAAI,SAAAC,GAAC,OAAI,4BACvB,yBAAKJ,IAAKI,EAAEP,QACZ,4BAAKO,EAAEN,WACP,2BAAIM,EAAEL,a,mDCQCM,E,YAlCX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAMVC,YAAc,WACc,IAArB,EAAKC,MAAMC,MACV,EAAKC,SAAS,CAACC,IAAK,EAAKH,MAAMG,GACpBF,MAAO,IAElB,EAAKC,SAAS,CAACC,IAAK,EAAKH,MAAMG,GAC3BF,MAAO,KAXf,EAAKD,MAAQ,CACTG,IAAI,EACJF,MAAO,GAJG,E,sEAkBd,IAAMG,EAASC,KAAKL,MAAMG,GAAK,KAAO,MACtC,OACA,yBAAKG,UAAY,SACb,yBAAKC,MAAO,CAACC,UAAU,QAAD,OAAUH,KAAKL,MAAMC,MAArB,sBAAgDT,IAAKiB,IAAMC,MAAM,WAAWjB,IAAI,QACtG,6BACA,4BAAQkB,QAASN,KAAKN,YACdO,UAAWF,GAASA,EAAOQ,0B,GAzB3BC,aC0BLC,MAvBf,WACE,OACE,yBAAKR,UAAU,OACb,4BAAQA,UAAU,cAClB,kBAAC,EAAD,OAGA,kBAAC,EAAD,CACEf,MAAM,oEACND,UAAU,gBACVD,MAAM,iGAER,kBAAC,EAAD,CACEE,MAAM,qCACND,UAAU,eACVD,MAAM,gGAGR,kBAAC,EAAD,QCZc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.93a901c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\n\r\nconst Quote = ({image, character, quote}) => (\r\n   <figure>\r\n   <img\r\n   src={image}\r\n   alt={character}\r\n   />\r\n   <figcaption>\r\n     <blockquote>\r\n       {quote}\r\n     </blockquote>\r\n     <cite>\r\n       {character}\r\n     </cite>\r\n   </figcaption>\r\n </figure>\r\n);\r\nexport default Quote;","import React from 'react';\r\n\r\nconst Quotes = () => {\r\n    let dArr = [\r\n        {\r\n            quote:\r\n              \"Facts are meaningless. You could use facts to prove anything that's even remotely true.\",\r\n            character: \"Homer Simpson\",\r\n            image:\"https://cdn.glitch.com/3c3ffadc-3406-4440-bb95-d40ec8fcde72%2FHomerSimpson.png?1497567511939\"\r\n        },\r\n        {\r\n            quote: \"Nothing you say can upset us. We're the MTV generation.\",\r\n            character: \"Bart Simpson\",\r\n            image:\"https://cdn.glitch.com/3c3ffadc-3406-4440-bb95-d40ec8fcde72%2FBartSimpson.png?1497567511638\"\r\n        },\r\n        {\r\n            quote: \"That's where I saw the leprechaun...He told me to burn things.\",\r\n            character: \"Ralph Wiggum\",\r\n            image:\"https://cdn.glitch.com/3c3ffadc-3406-4440-bb95-d40ec8fcde72%2FRalphWiggum.png?1497567511523\"\r\n        },\r\n        {\r\n            quote:\r\n              \"Hello, Simpson. I'm riding the bus today because Mother hid my car keys to punish me for talking to a woman on the phone. She was right to do it.\",\r\n            character: \"Principal Skinner\",\r\n            image:\"https://cdn.glitch.com/3c3ffadc-3406-4440-bb95-d40ec8fcde72%2FSeymourSkinner.png?1497567511460\"\r\n        }\r\n     ];\r\n    return (<ul>{dArr.map(x => <li>\r\n        <img src={x.image}></img>\r\n        <h1>{x.character}</h1>\r\n        <p>{x.quote}</p>\r\n    </li>)}</ul>);\r\n}\r\nexport default Quotes;","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\n\r\nclass Spins extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            on: false,\r\n            speed: 3\r\n        };\r\n    }\r\n    handleClick = () =>{\r\n        if(this.state.speed === 3){\r\n            this.setState({on: !this.state.on,\r\n                       speed: 0});\r\n        } else{\r\n            this.setState({on: !this.state.on,\r\n                speed: 3});\r\n        }\r\n    }\r\n    render() {\r\n\r\n        const bSpins = this.state.on ? 'on' : 'off';\r\n        return(\r\n        <div className = \"Spins\">\r\n            <img style={{animation: `spin ${this.state.speed}s linear infinite`}} src={logo} class=\"App-logo\" alt=\"img\"/>\r\n            <br/>\r\n            <button onClick={this.handleClick}\r\n                    className={bSpins}>{bSpins.toLocaleUpperCase()}\r\n            </button>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default Spins;","import React from 'react';\nimport './App.css'\nimport Quote from \"./Quote\";\nimport Quotes from './Quotes';\nimport Spins from './Spins';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <Spins/>\n      </header>\n\n      <Quote\n        quote=\"I believe the children are the future... Unless we stop them now!\"\n        character=\"Homer Simpson\"\n        image=\"https://cdn.glitch.com/3c3ffadc-3406-4440-bb95-d40ec8fcde72%2FHomerSimpson.png?1497567511939\"\n      />\n      <Quote\n        quote=\"Me fail English? That's unpossible\"\n        character=\"Ralph Wiggum\"\n        image=\"https://cdn.glitch.com/3c3ffadc-3406-4440-bb95-d40ec8fcde72%2FRalphWiggum.png?1497567511523\"\n      />\n\n      <Quotes />\n    </div>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}